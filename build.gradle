buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.17'
    }
}

plugins {
    id 'de.dfki.mary.voicebuilding-legacy' version '5.2.0'
    id 'de.undercouch.download' version '3.1.0'
}

group 'de.dfki.mary'
version '5.2-SNAPSHOT'

voice {
    name = 'dfki-pavoque-styles'
    language = 'de'
    gender = 'male'
    type = 'unit selection'
    description = 'A male German unit selection voice with expressive styles "happy", "sad", "angry", and "poker"'
    license {
        name = 'Creative Commons Attribution-NoDerivs 3.0 Unported'
        shortName = 'CC-BY-ND'
        url = 'http://mary.dfki.de/download/by-nd-3.0.html'
    }
    samplingRate = 16000
}

ext {
    styles = ['angry', 'happy', 'neutral', 'poker', 'sad']
    stylemap = [styles, ['sp', 'pp', 'ne', 'pk', 'ob']].transpose().collectEntries()
    flacFiles = styles.collect { file("$buildDir/pavoque-${it}.flac") }
    yamlFiles = styles.collect { file("$buildDir/pavoque-${it}.yaml") }
}

import de.undercouch.gradle.tasks.download.Download
import org.yaml.snakeyaml.Yaml

task downloadAudio(type: Download) {
    src flacFiles.collect { "https://github.com/marytts/pavoque-data/releases/download/v0.2/$it.name" }
    dest buildDir
    overwrite false
    acceptAnyCertificate true
}

task downloadData(type: Download) {
    src yamlFiles.collect { "https://github.com/marytts/pavoque-data/releases/download/v0.2/$it.name" }
    dest buildDir
    overwrite false
    acceptAnyCertificate true
}

task extractLab {
    dependsOn downloadData
    def destDir = file("$buildDir/lab")
    inputs.file yamlFiles
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        yamlFiles.each { yamlFile ->
            new Yaml().load(yamlFile.newReader()).each { utterance ->
                if (utterance.segments) {
                    file("$destDir/${stylemap[utterance.style]}_${utterance.prompt}.lab").withWriter { writer ->
                        writer.println '#'
                        utterance.segments.each { segment ->
                            writer.println "$segment.end 125 $segment.lab"
                        }
                    }
                }
            }
        }
    }
}
